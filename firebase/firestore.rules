rules_version = '2';
service cloud.firestore {
  // NOTE: This ruleset merges enthusiast-specific access controls.
  // CI deploy: `firebase deploy --only firestore:rules`
  // Local verify: `firebase emulators:start --only firestore` and run rules tests.
  match /databases/{database}/documents {
    
    // ===== Helper Functions =====

    // Product data validation helper
    function isValidProductData(d) {
      return d.keys().hasAll(['productId', 'sellerId', 'name', 'price', 'category']) &&
             d.price is number &&
             d.price > 0 &&
             d.quantity is number &&
             d.quantity >= 0;
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    function hasPhone() {
      return request.auth != null && request.auth.token.phone_number != null;
    }
    
    function isVerified() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.verificationStatus == 'VERIFIED';
    }
    
    // ===== Enthusiasts Scoped Collections =====
    // Scoped under enthusiasts/{userId}
    match /enthusiasts/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      // Require user to be owner and hold ENTHUSIAST role via claim or users doc
      allow write: if isAuthenticated() && isOwner(userId) && isEnthusiast();

      // Mating logs
      match /mating_logs/{logId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create, update, delete: if isAuthenticated() && isOwner(userId)
          && request.resource.data.farmerId == userId
          && request.resource.data.pairId != '';
      }

      // Egg collections
      match /egg_collections/{collectionId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create, update, delete: if isAuthenticated() && isOwner(userId)
          && request.resource.data.farmerId == userId
          && request.resource.data.pairId != '';
      }

      // Enthusiast dashboard snapshots
      match /dashboard_snapshots/{snapshotId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create, update, delete: if isAuthenticated() && isOwner(userId)
          && request.resource.data.userId == userId;
      }
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return request.auth.token.role == role;
    }
    
    function isGeneral() {
      return hasRole('GENERAL');
    }
    
    function isFarmer() {
      return hasRole('FARMER');
    }
    
    // Strong enthusiast check: prefer custom claim, fallback to users/{uid}.role
    function isEnthusiast() {
      return hasRole('ENTHUSIAST') ||
        (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ENTHUSIAST');
    }
    
    function isVerifiedSeller() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerifiedSeller == true;
    }
    
    // ===== Products Collection =====
    // Public read for marketplace browsing
    // Only verified sellers can create/update products
    match /products/{productId} {
      allow read: if true; // Public marketplace - anyone can browse
      
      allow create: if (request.resource.data.debug == true) || 
                      (isAuthenticated() && 
                      request.resource.data.sellerId == request.auth.uid &&
                      (isFarmer() || isEnthusiast()) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.verificationStatus == 'VERIFIED' &&
                      !(request.resource.data.lifecycleStatus in ['DECEASED', 'TRANSFERRED']) &&
                      isValidProductData(request.resource.data));
      
      allow update: if isAuthenticated() && 
                      resource.data.sellerId == request.auth.uid &&
                      request.resource.data.sellerId == request.auth.uid && // Prevent seller ID changes
                      !(resource.data.lifecycleStatus in ['DECEASED', 'TRANSFERRED']) &&
                      !(request.resource.data.lifecycleStatus in ['DECEASED', 'TRANSFERRED']) &&
                      isValidProductData(request.resource.data);
      
      allow delete: if isAuthenticated() && 
                      resource.data.sellerId == request.auth.uid;
    }
    
    // ===== Orders Collection =====
    // Users can only read/write their own orders
    // Buyers can create, sellers can update status
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                    (resource.data.buyerId == request.auth.uid || 
                     resource.data.sellerId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                      request.resource.data.buyerId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['orderId', 'buyerId', 'sellerId', 'totalAmount', 'status']) &&
                      request.resource.data.totalAmount is number &&
                      request.resource.data.totalAmount > 0 &&
                      request.resource.data.status in ['PLACED', 'PENDING'];
      
      allow update: if isAuthenticated() && 
                      (resource.data.buyerId == request.auth.uid || 
                       resource.data.sellerId == request.auth.uid) &&
                      // Buyers can cancel, sellers can update status
                      (request.resource.data.status in ['PLACED', 'CONFIRMED', 'OUT_FOR_DELIVERY', 'DELIVERED', 'CANCELLED']);
      
      allow delete: if false; // Never delete orders, use soft delete in app
    }
    
    // ===== Users Collection =====
    // Users can read any profile (public marketplace)
    // Users can only write their own profile
    match /users/{userId} {
      allow read: if isAuthenticated(); // All authenticated users can view profiles
      
      allow create: if isAuthenticated() && 
                      isOwner(userId) &&
                      request.resource.data.userId == userId &&
                      hasPhone();
      
      // Users can update their own non-admin verification fields, but cannot self-approve.
      allow update: if isAuthenticated() && isOwner(userId) &&
        request.resource.data.userId == userId &&
        // Prevent changing admin-controlled fields
        request.resource.data.verificationStatus == resource.data.verificationStatus &&
        request.resource.data.kycVerifiedAt == resource.data.kycVerifiedAt &&
        request.resource.data.locationVerified == resource.data.locationVerified &&
        request.resource.data.kycRejectionReason == resource.data.kycRejectionReason &&
        // Rate-limit new submissions (24h) unless first time
        (
          (resource.data.kycUploadedAt == null) ||
          (request.resource.data.kycUploadedAt - resource.data.kycUploadedAt > 86400000)
        ) &&
        // Validate KYC URLs look like Firebase Storage or gs:// links when provided
        (
          !("kycDocumentUrls" in request.resource.data) ||
          request.resource.data.kycDocumentUrls.matches('^\\s*\\[\\s*("(https://firebasestorage\\.googleapis\\.com/|gs://)[^"]+"\\s*,\\s*)*"(https://firebasestorage\\.googleapis\\.com/|gs://)[^"]+"\\s*\\]\\s*$')
        ) &&
        (
          !("kycImageUrls" in request.resource.data) ||
          request.resource.data.kycImageUrls.matches('^\\s*\\[\\s*("(https://firebasestorage\\.googleapis\\.com/|gs://)[^"]+"\\s*,\\s*)*"(https://firebasestorage\\.googleapis\\.com/|gs://)[^"]+"\\s*\\]\\s*$')
        );

      // Admins can update verification fields
      allow update: if isAuthenticated() && isAdmin() &&
        request.resource.data.keys().hasAny(['verificationStatus','kycVerifiedAt','locationVerified','kycRejectionReason']);
      allow delete: if false; // Prevent profile deletion
      
      // Protect sensitive PII fields
      match /{document=**} {
        allow read: if isAuthenticated() && 
                      (isOwner(userId) || 
                       // Others can only see public fields
                       !resource.data.keys().hasAny(['phoneNumber', 'email', 'address', 'paymentMethods']));
      }
    }
    
    // ===== Notifications Collection =====
    // Users can only read their own notifications
    // Server-side writes only (via Cloud Functions)
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      allow write: if false; // Only server can write notifications
    }
    
    // ===== Posts Collection =====
    // Public read for community feed
    // Authenticated users can create posts
    match /posts/{postId} {
      allow read: if true; // Public community feed
      
      allow create: if isAuthenticated() && 
                      request.resource.data.authorId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['postId', 'authorId', 'text', 'createdAt']);
      
      allow update: if isAuthenticated() && 
                      resource.data.authorId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                      resource.data.authorId == request.auth.uid;
    }
    
    // ===== Comments Collection =====
    match /posts/{postId}/comments/{commentId} {
      allow read: if true;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.authorId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
                              resource.data.authorId == request.auth.uid;
    }
    
    // ===== Likes Collection =====
    match /posts/{postId}/likes/{likeId} {
      allow read: if true;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // ===== Cart Items Collection =====
    // Private to each user
    match /users/{userId}/cart/{cartItemId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // ===== Wishlist Collection =====
    match /users/{userId}/wishlist/{wishlistItemId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // ===== Transfers Collection =====
    // Secure fowl transfer system
    match /transfers/{transferId} {
      allow read: if isAuthenticated() && 
                    (resource.data.fromUserId == request.auth.uid || 
                     resource.data.toUserId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                      request.resource.data.fromUserId == request.auth.uid &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.verificationStatus == 'VERIFIED' &&
                      isEnthusiast() &&
                      get(/databases/$(database)/documents/products/$(request.resource.data.productId)).data.sellerId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                      resource.data.toUserId == request.auth.uid &&
                      resource.data.status == 'PENDING' &&
                      request.resource.data.status in ['APPROVED', 'REJECTED'];
      
      allow delete: if false;
    }
    
    // ===== Verification Audits Collection =====
    match /verification_audits/{docId} {
      allow read: if isAdmin();
      allow write: if false; // Server-side only (Cloud Functions)
    }

    // ===== Daily Logs Collection =====
    match /daily_logs/{logId} {
      allow read: if isAuthenticated() && resource.data.farmerId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.farmerId == request.auth.uid && (isFarmer() || isEnthusiast());
      allow update: if isAuthenticated() && resource.data.farmerId == request.auth.uid && request.resource.data.farmerId == request.auth.uid;
      allow delete: if false; // Soft delete only
    }

    // ===== Family Tree Collection =====
    match /family_tree/{nodeId} {
      allow read: if true; // Public lineage viewing
      allow create, update: if isAuthenticated() && (isFarmer() || isEnthusiast()) && isVerified() &&
        get(/databases/$(database)/documents/products/$(request.resource.data.productId)).data.sellerId == request.auth.uid;
      allow delete: if false; // Soft delete only via update
    }

    // ===== Audit Logs Collection =====
    match /audit_logs/{logId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.actorUserId == request.auth.uid);
      allow create: if false; // Server-side only
      allow update, delete: if false; // Immutable
    }

    // ===== Analytics Collection =====
    // Server-side only
    match /analytics/{document=**} {
      allow read: if false;
      allow write: if false; // Only server can write analytics
    }
    
    // ===== Product Trackings (dev-friendly reads) =====
    // Allow any authenticated user to read for development to stop sync errors
    match /productTrackings/{doc} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // ===== Default Deny =====
    // Deny all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
