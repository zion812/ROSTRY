rules_version = '2';
service cloud.firestore {
  // NOTE: This ruleset merges enthusiast-specific access controls.
  // CI deploy: `firebase deploy --only firestore:rules`
  // Local verify: `firebase emulators:start --only firestore` and run rules tests.
  match /databases/{database}/documents {
    
    // ===== Helper Functions =====
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // ===== Enthusiasts Scoped Collections =====
    // Scoped under enthusiasts/{userId}
    match /enthusiasts/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      // Require user to be owner and hold ENTHUSIAST role via claim or users doc
      allow write: if isAuthenticated() && isOwner(userId) && isEnthusiast();

      // Mating logs
      match /mating_logs/{logId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create, update, delete: if isAuthenticated() && isOwner(userId)
          && request.resource.data.farmerId == userId
          && request.resource.data.pairId != '';
      }

      // Egg collections
      match /egg_collections/{collectionId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create, update, delete: if isAuthenticated() && isOwner(userId)
          && request.resource.data.farmerId == userId
          && request.resource.data.pairId != '';
      }

      // Enthusiast dashboard snapshots
      match /dashboard_snapshots/{snapshotId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create, update, delete: if isAuthenticated() && isOwner(userId)
          && request.resource.data.userId == userId;
      }
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return request.auth.token.role == role;
    }
    
    function isGeneral() {
      return hasRole('GENERAL');
    }
    
    function isFarmer() {
      return hasRole('FARMER');
    }
    
    // Strong enthusiast check: prefer custom claim, fallback to users/{uid}.role
    function isEnthusiast() {
      return hasRole('ENTHUSIAST') ||
        (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ENTHUSIAST');
    }
    
    function isVerifiedSeller() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerifiedSeller == true;
    }
    
    // ===== Products Collection =====
    // Public read for marketplace browsing
    // Only verified sellers can create/update products
    match /products/{productId} {
      allow read: if true; // Public marketplace - anyone can browse
      
      allow create: if isAuthenticated() && 
                      request.resource.data.sellerId == request.auth.uid &&
                      (isFarmer() || isEnthusiast());
      
      allow update: if isAuthenticated() && 
                      resource.data.sellerId == request.auth.uid &&
                      request.resource.data.sellerId == request.auth.uid; // Prevent seller ID changes
      
      allow delete: if isAuthenticated() && 
                      resource.data.sellerId == request.auth.uid;
      
      // Validate product data
      match /{document=**} {
        allow write: if request.resource.data.keys().hasAll(['productId', 'sellerId', 'name', 'price', 'category']) &&
                       request.resource.data.price is number &&
                       request.resource.data.price > 0 &&
                       request.resource.data.quantity is number &&
                       request.resource.data.quantity >= 0;
      }
    }
    
    // ===== Orders Collection =====
    // Users can only read/write their own orders
    // Buyers can create, sellers can update status
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                    (resource.data.buyerId == request.auth.uid || 
                     resource.data.sellerId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                      request.resource.data.buyerId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['orderId', 'buyerId', 'sellerId', 'totalAmount', 'status']) &&
                      request.resource.data.totalAmount is number &&
                      request.resource.data.totalAmount > 0 &&
                      request.resource.data.status in ['PLACED', 'PENDING'];
      
      allow update: if isAuthenticated() && 
                      (resource.data.buyerId == request.auth.uid || 
                       resource.data.sellerId == request.auth.uid) &&
                      // Buyers can cancel, sellers can update status
                      (request.resource.data.status in ['PLACED', 'CONFIRMED', 'OUT_FOR_DELIVERY', 'DELIVERED', 'CANCELLED']);
      
      allow delete: if false; // Never delete orders, use soft delete in app
    }
    
    // ===== Users Collection =====
    // Users can read any profile (public marketplace)
    // Users can only write their own profile
    match /users/{userId} {
      allow read: if isAuthenticated(); // All authenticated users can view profiles
      
      allow create: if isAuthenticated() && 
                      isOwner(userId) &&
                      request.resource.data.userId == userId;
      
      allow update: if isAuthenticated() && 
                      isOwner(userId) &&
                      request.resource.data.userId == userId; // Prevent userId changes
      
      allow delete: if false; // Prevent profile deletion
      
      // Protect sensitive PII fields
      match /{document=**} {
        allow read: if isAuthenticated() && 
                      (isOwner(userId) || 
                       // Others can only see public fields
                       !request.resource.data.keys().hasAny(['phoneNumber', 'email', 'address', 'paymentMethods']));
      }
    }
    
    // ===== Notifications Collection =====
    // Users can only read their own notifications
    // Server-side writes only (via Cloud Functions)
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      allow write: if false; // Only server can write notifications
    }
    
    // ===== Posts Collection =====
    // Public read for community feed
    // Authenticated users can create posts
    match /posts/{postId} {
      allow read: if true; // Public community feed
      
      allow create: if isAuthenticated() && 
                      request.resource.data.authorId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['postId', 'authorId', 'text', 'createdAt']);
      
      allow update: if isAuthenticated() && 
                      resource.data.authorId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                      resource.data.authorId == request.auth.uid;
    }
    
    // ===== Comments Collection =====
    match /posts/{postId}/comments/{commentId} {
      allow read: if true;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.authorId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
                              resource.data.authorId == request.auth.uid;
    }
    
    // ===== Likes Collection =====
    match /posts/{postId}/likes/{likeId} {
      allow read: if true;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // ===== Cart Items Collection =====
    // Private to each user
    match /users/{userId}/cart/{cartItemId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // ===== Wishlist Collection =====
    match /users/{userId}/wishlist/{wishlistItemId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // ===== Transfers Collection =====
    // Secure fowl transfer system
    match /transfers/{transferId} {
      allow read: if isAuthenticated() && 
                    (resource.data.fromUserId == request.auth.uid || 
                     resource.data.toUserId == request.auth.uid);
      
      allow create: if false; // Only via Cloud Function
      
      allow update: if isAuthenticated() && 
                      resource.data.toUserId == request.auth.uid &&
                      resource.data.status == 'PENDING' &&
                      request.resource.data.status in ['APPROVED', 'REJECTED'];
      
      allow delete: if false;
    }
    
    // ===== Analytics Collection =====
    // Server-side only
    match /analytics/{document=**} {
      allow read: if false;
      allow write: if false; // Only server can write analytics
    }
    
    // ===== Default Deny =====
    // Deny all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
